/* COMMON */
.body__container {
    font-family: 'Roboto', sans-serif;
    font-size: 16px;
    font-weight: 400;
    color: #333;
}

a {
    text-decoration: none;
}

/* FLOAT CLEARFIX */
.clearfix::after {
    content: "";
    clear: both;
    display: block;
}

.float--left {
    float: left;
}

.float--right {
    float: right;
}

/* SUMMARY */
.summary {

}
.summary__title {
    font-size: 38px;
    font-weight: 300; /* normal이 400 */
    line-height: 1.25;
    margin-bottom: 18px;
}

.summary__description {
    font-size: 26px;
    font-weight: 300;
    color: #767676;
    line-height: 1.5;
}

/* SECTION & INNER */
.section {
    position: relative;
}

.section .inner {
    max-width: 980px;
    margin: 0 auto;
    box-sizing: border-box;
    position: relative; 
    /*
    Position이 없는경우 부모요소에 relative를 선언해줘야함 
    계속 부모를 타고올라가다가 브라우저까지 갈 수 있음
     */
}

/* BTN */
.btn {
    height: 34px;
    background: #eee linear-gradient(to bottom, #fcfcfc, #eee);
    border: 1px sloid #d5d5d5;
    border-radius: 4px;
    display: inline-flex; 
    /* width:auto(100%와 유사하게 동작함) */
    /* inline으로 정의하면 모든 넓이를 사용하지 않고 안에 있는 컨텐츠에 맞춰줌 */
    align-items: center; /* 수직 가운데 정렬 */
    padding: 0 12px;
    font-size: 14px;
    font-weight: 500;
    line-height: 1.5;
    cursor: pointer;

    /* padding, border가 들어간 경우 사이즈가 커지는걸 방지해줌 */
    box-sizing: border-box;
    position: relative;
    color: #333;
}

.btn:hover::before {
    /* 
    가상 선택자를 사용하여 position을 지정하는 경우 부모요소의 position을 확인한다.
    만약 부모요소 position이 없는경우 부모요소 position은 relative로 명시한다.
    */
    content: "";
    position:absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.07);
}

.btn.btn--primary {
    border: 1px solid #65b836;
    color: #fff;
    background: #55a532 linear-gradient(#91dd70, #55ae2e);

}

/* INPUT TEXT */
.input--text {
    height: 34px;
    padding: 0 10px;
    box-sizing: border-box;
    border: 1px solid #ddd;
    border-radius: 5px;
    /* focus된 경우 아웃라인 없애기 */
    outline: none;

    /*
    inset을 사용하면 shadow가 안쪽으로 생김
    x축, y축, 두께, rgba(r, g, b, alpha channel)  
    */
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.075);
    font-size: 16px;
}

.input--text:focus {
    border-color: #51a7e8;

    /* 쉼표를 이용하여 shadow를 다중으로 사용할 수 있다. */
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.075)
                , 0 0 5px rgba(81, 167, 232, 0.5);
}

/* 
placeholder를 변경하는건 표준이 없음 Vendor Prefix를 작성해야함 
해당 Vendor의 browser에서 실험적으로 사용할 수 있는 기능이라는 것을 의미함
webkit: chrome
ms: mircroSoft
moz: mozila (FireFox)
*/
.input--text::-webkit-input-placeholder {
    color: #cacaca;
}

.input--text::-ms-input-placeholder {
    color: #cacaca;
}

.input--text::-moz-input-placeholder {
    color: #cacaca;
}

/* HEADER */
header {
    border-bottom: 1px solid rgba(0, 0, 0, 0.75);
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.75);
    background: #FFF;
}

/*
height는 default가 auto이다.
따라서 안에있는 content의 height의 영향을 받는다.
margin을 사용하기 위해서는 width가 반드시 정의되어야 한다.
매우 많이 사용하는 방법이니 꼭 기억해야함!
*/
header .inner {
    height: 78px;
}

/* 
flex를 사용했을 경우 align-items를 사용할 수 있다.
center를 이용하면 세로 가운데 정렬됨
*/
header .menu-group {
    display: flex;
    align-items: center;
    height: 100%;
}

header .logo {
    margin-right: 10px;
}

/* 
a태그의 display를 변경하지 않으면 내부에 이미지 표현불가 
(inline은 범위를 가지지못하고 범위가 없으면 내부에 이미지 표현이 불가능함)

이미지를 background에 url로 삽입한 경우 alt를 넣을 수 없다.
HTML에는 GitHub라는 Text를 넣어놓고 text-indent:-9999px을 넣으면
대체 텍스트를 사용한다는 것을 명시할 수 있다.
*/
header .logo a {
    background: url("../img/logo.svg");
    width: 32px;
    height: 32px;
    display: block;
    text-indent: -9999px;
}

header .logo a:hover {
    background: url("../img/logo_on.svg");
}

header .main-menu {
    display: flex
}

/* 
padding을 이용하여 확보하면 margin보다 넓은 공간을 확보할 수 있다.
버튼 크기가 작은경우 클릭범위를 넓혀주는데 좋다.
a는 display가 inline이기 때문에 padding요소를 제대로 사용할 수 없기 때문에
block으로 변경한다. (inline은 범위를 가지지 못한다.)
*/
header .main-menu li a {
    display: block;
    padding: 10px;
    color: #3c4146;
}

header .main-menu li a:hover {
    color: #4078c0
}

header .sign-group {
    display: flex;
    height: 100%;
    align-items: center;
}

header .btn-group {
    order: 2;
    display: flex;

}

header .btn-group .sign-in {
    margin-right: 4px;
}

#search-form {
    order: 1;
    margin-right: 12px;
}

#search {
    width: 160px;
    font-size: 14px;
}

/* #search의 다음 형제요소 선택자 (type이 submit) */
#search + [type="submit"] {
    display: none;
}

/* order의 default는 0이기 때문에 정의하지 않음  */
header .sub-menu {
    display: flex;
    margin-right: 10px;
}

header .sub-menu li a {
    padding: 8px;
    display: block;
    font-size: 13px;
    color: #3c4146;
}

header .sub-menu li a:hover {
    color: #4078c0;
}

/* VISUAL */
.section--visual {
    background-image: url("../img/bg.jpg");
    background-repeat: no-repeat;
    background-position: bottom left;
    background-size: cover; /* 배경사이즈를 요소의 전체 크기로 설정 */
}

.section--visual::before {
    /* 
    background image를 어둡게 만들기 위함 
    top, left, bottom, right를 0으로 만들고 position을 absolute로 지정하면
    부모요소를 완전히 덮는 효과를 줄 수 있다.
    position: abolute를 사용하면 부모요소의 position을 반드시 확인해야 한다.
    가상선택자의 부모는 앞에있는 선택자이다.
    현재 부모요소에 position이 없지만, section에 position을 지정해놓았기 때문에 지정하지않아도 된다.
    */
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    background: rgba(0, 0, 0, .3);
}

.section--visual .inner {
    padding: 160px 0;
    display: flex;
}

/* 
.section--visual .inner는 flexBox이다.
flexBox안에 있는 요소들에게 flex-grow, flex-basis, flex-shrink등의 효과를 지정할 수 있다.
flex: 0 1 auto (grow, shrink, basis이며 default이다. 명시하는순간 basis는 0으로 바뀐다.)
*/
.section--visual .summary {
    /* flex-grow: 1; */
    /* flex-basis: 0; */
    /* flex: 0 1 auto; */
    flex: 1; /* flex: 1 0 0과 동일 */
    margin-right: 90px;
}

.section--visual .summary__title {
    color: #fff;
    font-size: 54px;
    text-shadow: 0 1px 1px rgba(0, 0, 0, .25)
                 , 0 1px 25px rgba(0, 0, 0, .75);
}

.section--visual .summary__description {
    color: #fff;
    text-shadow: 0 1px 1px rgba(0, 0, 0, .25)
                 , 0 1px 25px rgba(0, 0, 0, .75);
}

/* 
부모요소의 width를 제어함으로써 자식요소도 함께 제어되도록 한다.
부모요소는 width를 fix, 자식요소는 width:100%설정을 하면됨.
 */
#sign-form{
    width: 340px;
    margin-top: 16px;
}

#sign-form li {
    margin-bottom: 17px;
}

#sign-form li:last-child {
    margin-bottom: 0;
}

#sign-form .input--text{
    width: 100%;
    height: 40px;
}

#sign-form .caption {
    font-size: 12px;
    margin-top: 5px;
    color: rgba(255, 255, 255, .6);
    line-height: 1.5;
    text-align: center;
}

/* 
submit의 class는 .btn인데 .btn의 display가 inline-flex이다.
flexable box의 경우
수평정렬을 위해서는 justify-content:cetner
수직정렬은 align-items:center를 사용한다.
 */
#sign-form [type="submit"] {
    width: 100%;
    height: 62px;
    padding: 0 25px;
    font-size: 20px;
    justify-content: center;
}

/* FEATURE */
.section--feature {
    background: #f5f5f5;
    padding-top: 66px;
}

.section--feature .summary {
    max-width: 820px;
    margin: 0 auto;
    text-align: center;
}

.section--feature .video {
    max-width: 650px;
    margin: 50px auto;
}

/* 
padding-top은 부모요소의 width에 영향을 받지만 height는 fix된다.
반응형으로 만들기 위해서는 height를 0으로 fix하고 padding-top을 이용하여 높이를 설정한다.
padding-top은 여백이기 때문에 그 안에 비디오를 넣기위해
iframe은 absolute, 부모요소인 vedio-ratio는 relative로 한다.
*/
.section--feature .video .video-ratio {
    height: 0;
    padding-top: 56.25%; /* 16 : 9 비율을 위한 값 */
    position: relative;
}

.section--feature .video .video-ratio iframe {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
}

.section--feature .tiles {
    border-top: 1px solid #e5e5e5;
    border-bottom: 1px solid #e5e5e5;
}

.section--feature .tiles .inner {
    max-width: 1200px;
}

/* 
구형 브라우저를 사용하는 경우 grid가 동작하지 않을 수 있다.
grid-template-columns: repeat(4, 1fr) => column을 4개 만들고 비율은 1:1:1:1
*/
/* 
.section--feature .tiles ul {
    display: grid;
    grid-template-columns: repeat(4, 1fr); 
} 
*/

.section--feature .tiles ul li {
    padding: 34px 24px;
    text-align: center;
    line-height: 1.5;
    border-right: 1px solid #e5e5e5;
    box-sizing: border-box;

    /* 구형 브라우저를 지원하는 경우 float으로 수평정렬을 할 수 있음 */
    float: left; /* float사용 시 부모요소에 clearfix확인 */
    width: 25%; /* %를 사용하는 경우 box-sizing확인 */
}

.section--feature .tiles ul li:last-child {
    border-right: none;
}

/*
이미지를 반응형으로 만들기 위해 max-width를 사용하고
padding을 상하는 px, 좌우는 %를 사용한다.
padding으로 인해 크기가 커지지 않도록 box-sizing: border-box를 사용한다.
*/
.section--feature .tiles ul li img {
    max-width: 100%;
    padding: 14px 10% 24px; /* 좌우가 %인것을 주의 */   
    box-sizing: border-box;
}

.section--feature .tiles ul li h3 {
    font-size: 18px;
    font-weight: 500;
    margin-bottom: 10px;
}

.section--feature .tiles ul li p {
    font-size: 14px;
    color: #767676;
}

/* WHERE IS */
.section--where-is {

}

.section--where-is .inner{
    padding-top: 80px;
}

#map {
    width: 100%;
    height: 400px;
    margin-top: 40px;
    border: 1px solid rgba(0, 0, 0, .2);
    border-bottom: none;
    box-shadow: 0 0 20px rgba(0, 0, 0, .2);
    box-sizing: border-box;
}

/* PRICING CARD */
.section--pricing {
    background: linear-gradient(#f5f5f5, #fff);
}

.section--pricing .inner {
    padding: 80px 0;
}

.section--pricing .inner .card{
    display: flex;
    border: 1px solid #e5e5e5;
    border-radius: 6px;
    box-sizing: border-box;
}

.section--pricing .inner .card .cell {
    padding: 24px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.section--pricing .inner .card .cell1 .btn {
    height: 50px;
    font-size: 16px;
}

.section--pricing .inner .card .cell2 {
    font-size: 22px;
    font-weight: 300;
    line-height: 1.5;
    flex: 1; /* 텍스트가 가변될 수 있도록 grow를 1 basis를 0으로 설정 */
    border-left: 1px solid #e5e5e5;
}
















